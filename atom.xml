<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Cat Way]]></title>
  <link href="http://cat.hackingisbelieving.org//atom.xml" rel="self"/>
  <link href="http://cat.hackingisbelieving.org//"/>
  <updated>2012-08-20T18:10:34+09:00</updated>
  <id>http://cat.hackingisbelieving.org//</id>
  <author>
    <name><![CDATA[Itoshi NIKAIDO]]></name>
    <email><![CDATA[dritoshi@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to change key bindings in the RStudio console]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/08/16/how-to-change-key-bindings-in-the-rstudio-console/"/>
    <updated>2012-08-16T16:41:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/08/16/how-to-change-key-bindings-in-the-rstudio-console</id>
    <content type="html"><![CDATA[<p><a href="http://rstudio.org/">RStudio</a> のキーバインドを変える。ただし、Mac で。</p>

<p>統計解析環境R、最強のGUI環境 <a href="http://rstudio.org/">RStudio</a> を愛用しつつある。ほぼ emacs like な key binding にはなっているが、console でのコマンド履歴がカーソルの上下に設定されている。これだとホームポジションから手が離れるし、HHK Pro2 とかだとしんどい。これを Control + P, Control + N にそれぞれ割り当てたい。</p>

<p>そこで、KeyRemap4Mac でキーバインドを設定してみた。やりかたは、KeyRemap4Mac をインストールして、メニューバーから設定画面に入る。&#8221;Misc &amp; Uninstall&#8221; を選び、&#8221;Custom Setting&#8221; の &#8220;Open private.xml&#8221; を開く。これを適当なエディタで開いて、以下のようにする。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;root&gt;</span>
</span><span class='line'>  <span class="nt">&lt;appdef&gt;</span>
</span><span class='line'>      <span class="nt">&lt;appname&gt;</span>RSTUDIO<span class="nt">&lt;/appname&gt;</span>
</span><span class='line'>      <span class="nt">&lt;equal&gt;</span>org.rstudio.RStudio<span class="nt">&lt;/equal&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/appdef&gt;</span>
</span><span class='line'>  <span class="nt">&lt;item&gt;</span>
</span><span class='line'>      <span class="nt">&lt;name&gt;</span>RSTUDIO<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>      <span class="nt">&lt;list&gt;</span>
</span><span class='line'>          <span class="nt">&lt;item&gt;</span>
</span><span class='line'>              <span class="nt">&lt;name&gt;</span>Change Ctrl+P to Up-Arrow<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>              <span class="nt">&lt;appendix&gt;</span>(only in RStudio)<span class="nt">&lt;/appendix&gt;</span>
</span><span class='line'>                <span class="nt">&lt;identifier&gt;</span>private.RStdio_control_p_up_arrow<span class="nt">&lt;/identifier&gt;</span>
</span><span class='line'>                <span class="nt">&lt;only&gt;</span>RSTUDIO<span class="nt">&lt;/only&gt;</span>
</span><span class='line'>                <span class="nt">&lt;autogen&gt;</span>--KeyToKey-- KeyCode::P, ModifierFlag::CONTROL_L, KeyCode::CURSOR_UP<span class="nt">&lt;/autogen&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/item&gt;</span>
</span><span class='line'>          <span class="nt">&lt;item&gt;</span>
</span><span class='line'>              <span class="nt">&lt;name&gt;</span>Change Ctrl+N to Down-Arrow<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>              <span class="nt">&lt;appendix&gt;</span>(only in RStudio)<span class="nt">&lt;/appendix&gt;</span>
</span><span class='line'>                <span class="nt">&lt;identifier&gt;</span>private.RStdio_control_p_down_arrow<span class="nt">&lt;/identifier&gt;</span>
</span><span class='line'>                <span class="nt">&lt;only&gt;</span>RSTUDIO<span class="nt">&lt;/only&gt;</span>
</span><span class='line'>                <span class="nt">&lt;autogen&gt;</span>--KeyToKey-- KeyCode::N, ModifierFlag::CONTROL_L, KeyCode::CURSOR_DOWN<span class="nt">&lt;/autogen&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/item&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/list&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/item&gt;</span>
</span><span class='line'><span class="nt">&lt;/root&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>そして、KeyRemap4MacBook の設定画面に戻って、&#8221;Change Key&#8221; を選択、画面右上の &#8220;ReloadXML&#8221; をクリックすると、以下のようになる。</p>

<p><img src="https://img.skitch.com/20120816-83px9quhd388wc6m8wi7ctsqpb.png" alt="R studio のキーバインドを変更する" /></p>

<p>ふたつともチェックして、RStudio の console で適当なコマンド入力して、Control + P, N してみると、ちゃんと履歴が表示される。めちゃくちゃ快適。<a href="https://twitter.com/ma_ko/status/235983572018810881">@ma_ko さんくす</a>。</p>

<p>参考:</p>

<ul>
<li><a href="http://pqrs.org/macosx/keyremap4macbook/xml.html.ja">private.xml Reference Manual</a></li>
<li><a href="http://orera.g.hatena.ne.jp/edvakf/20110531/1306858764">Mac版でEmacs風キーバインドがおかしい（とてもおかしい）のをなんとかする</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to install Octopress on your Github Pages]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/08/14/how-to-install-octopress-on-your-github-pages/"/>
    <updated>2012-08-14T11:44:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/08/14/how-to-install-octopress-on-your-github-pages</id>
    <content type="html"><![CDATA[<p>Octopress を GitHub Pages にインストールして設定するまでのメモ</p>

<h2>準備</h2>

<p>GitHub, git, Ruby 1.9.3, rvm を用意する。GitHub の username は dritoshi. 必要に応じて、Google アナリティクスのトラッキングID, disqus.com のアカウント、独自ドメインの設定に必要な情報を用意しておく。</p>

<h2>GitHub の準備</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir dritoshi.github.com
</span><span class='line'>cd dritoshi.github.com
</span><span class='line'>touch README.md
</span><span class='line'>git init
</span><span class='line'>git add *
</span><span class='line'>git commit -m 'first commit'
</span><span class='line'>git remote add origin git@github.com:dritoshi/dritoshi.github.com.git
</span><span class='line'>$ git push -u origin master</span></code></pre></td></tr></table></div></figure>


<h2>Octopress のインストール</h2>

<p>ひと階層上の octopress ディレクトリにインストールする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ..
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>sudo gem install bundler
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>GitHub へインストールする</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<h2>Octopress の設定</h2>

<h3>各種機能</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>subl _config.yml</span></code></pre></td></tr></table></div></figure>


<p>Google アナリティクスのコード、G+ のアカウントID (URLに含まれる数字の列) などを用意しておき、_config.yml に反映させておく。コメントを有効にするためには、(disqus)[disqus.com] にアカウントを作成し、プログを登録しておく (独自ドメインを利用する場合はそちらを先に設定しておく)。自分で設定したプログの short name が必要になる。アカウントIDではない。</p>

<p>サイドバーに About me を表示するには、source/custom/asides/about.html を編集して、_config.yml の default_asides にファイル名を指定する。</p>

<h3>テーマ</h3>

<p>テーマを変えるには、github で配布されているテーマを探してきて、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone http://github.com/iwinux/compbits .themes/compbits 
</span><span class='line'>rake install\['compbits'\] # zsh はエスケープ
</span><span class='line'>rake generate</span></code></pre></td></tr></table></div></figure>


<p>とする。</p>

<p>参考: <a href="https://github.com/imathis/octopress/wiki/List-Of-Octopress-Themes">List Of Octopress Themes</a></p>

<h3>独自ドメイン</h3>

<p>独自ドメインを設置するには、ドメインの設定をCNAME を設定して、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo 'cat.hackingisbelieving.org' &gt; source/CNAME
</span><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>Google Apps で取得したドメイン名は、コントロールパネルの Domain settings, Adovanced DNA settings で発行される ドメイン管理会社のアカウントIDとパスワードを使って設定する。
https://www.google.com/a/cpanel/hackingisbelieving.org/DomainSettingsAdvancedDns</p>

<p>参考: <a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">Octopressのインストールから運用管理まで</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to write a new entry]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/08/14/how-to-write-a-new-entry/"/>
    <updated>2012-08-14T11:12:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/08/14/how-to-write-a-new-entry</id>
    <content type="html"><![CDATA[<h2>Blog entry の場合</h2>

<h3>Markdown ファイルの生成</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /Users/itoshi/Projects/writing/octopress
</span><span class='line'>rake new_post\['How to write a new entry'\] # zsh はエスケープが必要</span></code></pre></td></tr></table></div></figure>


<h3>執筆</h3>

<p><a href="http://www.sublimetext.com/2">Sublime text 2</a> でエントリを執筆する。もちろん事前に sublime text 2 のコマンドを path に通しておく。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl ~/opt/bin/subl</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>subl source/_posts/2012-08-14-how-to-write-a-new-entry.markdown</span></code></pre></td></tr></table></div></figure>


<p>Markdown の書きかたは、<a href="http://cat.hackingisbelieving.org//links">Links</a> にある。</p>

<h3>HTMLの生成とプレビュー</h3>

<p>まず始めに以下のようにする</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake preview</span></code></pre></td></tr></table></div></figure>


<p>http://localhost:4000/ にブラウザでアクセスしてプレビューを確認する。</p>

<p>その後は、書くたびにブラウザをリドードすればよい。</p>

<h3>デプロイ</h3>

<p>github page 上の Octopress にデプロイする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>


<p>generate と deploy の両方を同時におこなうコマンド。generate し忘れがないように、これを使っている。</p>

<h2>ページの場合</h2>

<p>基本的には上の流れてほぼ同じ。最初のページ生成コマンドが違う。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /Users/itoshi/Projects/writing/octopress
</span><span class='line'>rake new_page\['How to write a new entry'\] # zsh はエスケープが必要</span></code></pre></td></tr></table></div></figure>


<p>生成されるファイルは、source/how-to-write-a-new-entry/index.markdown のようになる。</p>

<p>ナビゲーションバーに表示させるには、source/_includes/custom/navigation.html を編集する。</p>

<p>HTML生成やプレビュー、デプロイの流れは blog entry とまったく同じ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R Markdown with Octopress on your GitHub]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/08/13/r-markdown-with-octopress/"/>
    <updated>2012-08-13T19:12:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/08/13/r-markdown-with-octopress</id>
    <content type="html"><![CDATA[<p>R Markdown を GitHub Pages 上の Octopres にアップロートする方法についてメモしておく。</p>

<h2>準備</h2>

<p>Knitr の設定済みの状態からスタートする。RStudio 入れればそれでおしまい。次に Octopress の準備。これ読むひとはもう終わっているだろうから飛す。</p>

<p>Rmdを変換する関数は以下の通り。関数名が無駄に長い。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Rmd2md.for.octopress &lt;- function(input, base.url = "/") {
</span><span class='line'>    require(knitr)
</span><span class='line'>
</span><span class='line'>    opts_knit$set(base.url = base.url)
</span><span class='line'>    fig.path &lt;- paste0("images/", sub(".Rmd$", "", basename(input)), "/")
</span><span class='line'>    output   &lt;- sub(".Rmd", ".markdown", input)
</span><span class='line'>
</span><span class='line'>    opts_chunk$set(fig.path = fig.path)
</span><span class='line'>    opts_chunk$set(fig.cap = "center")
</span><span class='line'>
</span><span class='line'>    render_jekyll()
</span><span class='line'>    knit(input, output = output, envir = parent.frame())
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>knit() ではなく、この関数を使うのは画像のパスをよきにはからうため。これを、~/.Rprofile あたりに書いておく。これで準備終了。</p>

<p>ここを参考にした。 http://jfisher-usgs.github.com/r/2012/07/03/knitr-jekyll/
ほかにも、Octpress のディレクトリを指定できると以下のステップが省けてよいかも。</p>

<h2>R Markdown を書く</h2>

<p>ファイル名を yyyy-mm-dd-file-name.Rmd として RStudio やらなにやらで R Markdown のファイルを作成する。次に、生成されたファイルの先頭に、Octopress 用のヘッダを挿入する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: "R Markdown with Octopress"
</span><span class='line'>date: 2012-08-13 19:12
</span><span class='line'>comments: true
</span><span class='line'>categories: 
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>みたいな感じ。ブログエントリではなくて、page を作りたい場合は、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: "R Markdown with Octopress"
</span><span class='line'>date: 2012-08-13 18:00
</span><span class='line'>comments: true
</span><span class='line'>sharing: true
</span><span class='line'>footer: true
</span><span class='line'>---</span></code></pre></td></tr></table></div></figure>


<p>とする。</p>

<p>あとはひたすら書く。</p>

<h2>Octopress 用の Markdown へ変換する</h2>

<p>R を起動して、Markdown へ変換する。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Rmd2md.for.octopress("yyyy-mm-dd.Rmd")</span></code></pre></td></tr></table></div></figure>


<h2>公開する</h2>

<p>変換したファイルを Octopress のディレクトリにコピーする。画像もコピーする。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp yyyy-mm-dd-file-name.Rmd $OCTPRESS_HOME/source/_posts/
</span><span class='line'>cp -a yyyy-mm-dd-file-name $OCTPRESS_HOME/source/images/</span></code></pre></td></tr></table></div></figure>


<p>静的HTMLを生成して、preview したり、github へデプロイしたり。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd $OCTPRESS_HOME
</span><span class='line'>rake generate
</span><span class='line'>rake preview
</span><span class='line'>rake gen_deploy</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NGS analysis with R and Bioconductor]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/08/13/NGS-R-Bioconductor-1st/"/>
    <updated>2012-08-13T18:00:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/08/13/NGS-R-Bioconductor-1st</id>
    <content type="html"><![CDATA[<p>こちらでどうぞ。<a href="http://cat.hackingisbelieving.org//lecture">講義資料</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sampling from Probability Density Function]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/03/31/sampling-from-probability-density-function/"/>
    <updated>2012-03-31T15:19:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/03/31/sampling-from-probability-density-function</id>
    <content type="html"><![CDATA[<p>前のメモの続き。</p>

<h3>モンテカルロ積分の例</h3>

<h4>非有界区間のモンテカルロ積分</h4>

<p>前回までは、非有界区間のモンテカルロ積分を $Uniform$ からサンプリングしたが、前回の関数 (CDF)、</p>

<p>$$ \Phi \left( x \right) = \int_{-\infty}<sup>{\infty}\frac{1}{</sup> \sqrt{2\pi} } { e }<sup>{</sup> \frac{t<sup>2}{2}</sup> }dt $$</p>

<p>はこれ自体が PDF になっているので、これから直接サンプリングするこで、モンテカルロ積分ができる。</p>

<p>このように被積分関数そのものが PDF になっている例を考える。まず標準正規分布変数 $Z \sim N(0, 1)$ と指示関数 $I(\cdot)$ があると考える。指示関数とは、集合の元がその集合の特定の部分集合に属するかどうかを指定することによって定義する関数である。ダミー変数を出力するときに使うような関数を考えればよい。<a href="http://ja.wikipedia.org/wiki/%E6%8C%87%E7%A4%BA%E9%96%A2%E6%95%B0">Wikipedia:指示関数</a></p>

<p>どのような $x$ についても $x$ で推定される正規分布の累積関数 $E[I(Z \leq x)] = P(Z \leq x) = \Phi(x)$ の値が存在する。</p>

<p>標準正規分布より無作為標本 $z_1, …, z_m$ を生成する。これらの標本平均は、</p>

<p>$$ \widehat { \Phi(x) }  = \frac{1}{m}\sum_{i=1}<sup>{m}I(z_i</sup> \leq x ) $$</p>

<p>となる。この値はその期待値に確率1で収束する。</p>

<p>R で書いてみよう。</p>

<div><script src='https://gist.github.com/2260262.js?file='></script>
<noscript><pre><code>x.num &lt;- 10
x &lt;- seq(0.1, 2.5, length = x.num)
m &lt;- 100
z &lt;- rnorm(m)

p &lt;- sapply( x, function(x) mean(z &lt; x) )

Phi &lt;- pnorm(x)

res &lt;- cbind(x, p, Phi)
print(t(res))

png(&quot;sampling_pdf.png&quot;)
matplot(res[,1], res[,2:3], type = &quot;o&quot;, xlab = &quot;x&quot;, ylab = &quot;CDF&quot;)
dev.off()</code></pre></noscript></div>


<p>コードの</p>

<pre><code>sapply( x, function(x) mean(z &lt; x) )
</code></pre>

<p>の部分を少し解説すると、sapply が x をひとつずつ取りだして、ベクトル z とすべてに対して大小を判定する。このときベクトルで計算されるので、z より小さいものが TRUE, z 以上のものが FALSE として、ベクトルで返ってくる。mean() は TRUE の数を数えあげて、その個数で割る。これによって、
$$ \widehat { \Phi(x) }  = \frac{1}{m}\sum_{i=1}<sup>{m}I(z_i</sup> \leq x ) $$
を達成している。</p>

<p>m = 100 ぐらいでこのぐらいになる。
<img src="http://img.skitch.com/20120402-caj59bgccmr8tdcexwha2kw892.png" alt="CDF" /></p>

<p>m = 10000 ぐらいやると区別がつかないレベルになる。</p>

<h3>まとめ</h3>

<p>モンテカルロ積分は、一様分布からサンプリングすることで、積分する手法だった。被積分関数がPDFの場合は、直接その分布からサンプリングすることによっても積分が可能だった。実装もとても簡単。</p>

<h3>次は?</h3>

<p>教科書的には、このあと推定量の標準誤差や誤差上限の議論をして、分散を減少させる方法を述べる。次に重点サンプリング、層別サンプリングなどと続くであろう。そしてMCMCへと続くのが定番か。現在読んでいる Rによる計算機統計学が羅列的で少し読みにくいので、計算統計II に移行するかな?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MCMC Tutorials on Web]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/03/31/mcmc-tutorials-on-web/"/>
    <updated>2012-03-31T15:00:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/03/31/mcmc-tutorials-on-web</id>
    <content type="html"><![CDATA[<p>ウェブにある MCMC の講義資料のリンク集</p>

<ol>
<li><a href="http://park.itc.u-tokyo.ac.jp/atstat/jss75shunen/Vol3.pdf">第III巻 数理・計算の統計科学 (北川源四郎・竹村彰通編)</a> の第10章「マルコフ連鎖モンテカルロ法入門」</li>
<li><a href="http://tombo.sub.jp/doc/esj55/MCMC.pdf">マルコフ連鎖モンテカルロ法 (総研大 山道真人)</a></li>
<li><a href="http://mihama-w3.n-fukushi.ac.jp/ins/kusuda/paper/mcmc_for_economics.pdf">経済分析のためのMCMC入門 (
日本福祉大 楠田康)</a></li>
<li><a href="http://www.sas.com/offices/asiapacific/japan/usergroups/wg/archive/041015mati.pdf">ベイズ統計学のMCMCとの出会い (塩野義製薬 町田ら)</a></li>
<li><a href="http://ito-hi.blog.so-net.ne.jp/2005-12-25">MCMCの勉強 (1),  Taglibro de H</a></li>
</ol>


<p>以上、敬称略</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monte Carlo for unbounded integration]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/03/30/monte-carlo-for-unbounded-integration/"/>
    <updated>2012-03-30T19:28:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/03/30/monte-carlo-for-unbounded-integration</id>
    <content type="html"><![CDATA[<p>前のメモの続き。</p>

<h3>モンテカルロ積分の例</h3>

<h4>非有界区間のモンテカルロ積分</h4>

<p>標準正規分布の累積分布関数を推定をしてみる。
$$ \Phi \left( x \right) = \int_{-\infty}<sup>{\infty}\frac{1}{</sup> \sqrt{2\pi} } { e }<sup>{</sup> \frac{t<sup>2}{2}</sup> }dt $$</p>

<p>積分範囲が非有界だが、左右対称な関数なので、$x \geq 0$ と $x &lt; 0$ に分けして考えることができる。なので $x \geq 0$ だけを考えて、</p>

<p>$$ \theta = \int_{0}<sup>{x}</sup> {e}<sup>{-t<sup>2/2}</sup></sup> dt $$</p>

<p>を推定すればよい。</p>

<p>戦略は2つある。例によって、$Uniform(0, x)$ から確率変数を生成して推定すればよいのだが、このままでは、CDFの値が変わるたびに、$Uniform$ のパラメータを変えなければならない。なので置換積分で、0 から 1 の区間にしてしまってから、$Uniform(0, 1)$ を生成し推定する。これがひとつの方法である。もうひとつの方法は、そのまま、$Uniform(0, x)$ を生成して推定する方法である。後者は計算機を使えばそれほど難しくなく、置換積分する必要もないので簡単である。置換積分については<a href="http://ja.wikisource.org/wiki/%E8%A7%A3%E6%9E%90%E6%A6%82%E8%AB%96/%E7%AC%AC3%E7%AB%A0/%E7%A9%8D%E5%88%86%E5%A4%89%E6%95%B0%E3%81%AE%E5%A4%89%E6%8F%9B">解析概論第3章</a>が詳しい。</p>

<p>両方とも実装してみる。</p>

<div><script src='https://gist.github.com/2250888.js?file='></script>
<noscript><pre><code>x.num &lt;- 10 
x &lt;- seq(0.1, 2.5, length = x.num)
m &lt;- 100000
u &lt;- runif(m)

# integration by substitution
cdf &lt;- numeric(x.num)
for ( i in 1:x.num ) {
  g   &lt;- x[i] * exp( -(u * x[i])^2 / 2)
  cdf[i] &lt;- mean(g) / sqrt(2 * pi) + 0.5
}  

# do not substitution
cdf.2 &lt;- numeric(x.num)
for ( i in 1:x.num ) {
  u &lt;- runif(m, 0, x[i])
  g &lt;- x[i] * exp( -(u)^2 / 2 )
  cdf.2[i] &lt;- mean(g) / sqrt(2 * pi) + 0.5
} 

phi &lt;- pnorm(x)

# plot
matplot(x[,1], x[,2:4], type = &quot;o&quot;, xlab = &quot;x&quot;, ylab = &quot;CDF&quot;)

# output
res &lt;- cbind(x, cdf, cdf.2, phi)
print(t(res))</code></pre></noscript></div>


<p>あえて m の数を小さくして実行してみた。前半はよくあっているが最後のほうが上手く推定できていない。もちろん乱数を使うので、毎度結果は違うのでまったく同じグラフになることはない。</p>

<p><img src="https://img.skitch.com/20120402-fm7isrugi6pn6srxy21kxm2tjq.png" title="CDF" alt="CDF" /></p>

<p>m = 10000 ぐらいから、もう見た目には差がわからないレベルになる。以下は m を10万にしたものグラフ。ほとんど一致している。</p>

<p><img src="https://img.skitch.com/20120402-t3t52gxat3fmfyhunsi85u8pu5.png," title="100000" alt="CDB (100000)" /></p>

<h3>次は?</h3>

<p>今回は、被積分関数自体が確率密度関数 (PDF) なので、$Uniform$ ではなく、この PDFから確率変数を生成させることで、積分の推定値を求めることができる。次はこれをやってみる。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MCMC in R]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/03/29/mcmc-in-r/"/>
    <updated>2012-03-29T20:25:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/03/29/mcmc-in-r</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>必要にせまられて MCMC の勉強を始めるなど。<a href="http://www.amazon.co.jp/gp/product/4274068307?ie=UTF8&amp;tag=itoshitv-22&amp;linkCode=shr&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4274068307">Rによる計算機統計学</a>を必要なところだけ読んでいる。目的はベイズ回帰でMCMCが使われているあたりを理解すること。そのために</p>

<ul>
<li>2.1.7. で期待値の定義を確認</li>
<li>5.1-5.2 でモンテカルロ積分</li>
<li>9 から MCMC</li>
</ul>


<p>という流れを考えている。このメモは、2番目の途中まで。</p>

<h2>期待値</h2>

<p>まずは期待値の定義を確認する。確率変数 $X$ の平均は、期待値 $E[X]$ で表わす。Xが確率密度 $f$ で連続型であるなら、$X$ の期待値は
$$ E[X] = \int_{-\infty}<sup>{\infty}{xf(x)}dx</sup> $$
で与えられる。</p>

<p>確率密度関数fを持つ連続確率変数Xの関数 $g(x)$ の期待値は、
$$ E[g(x)]=\int _{ -\infty }<sup>{</sup> \infty  }{ g(x)f(x) } dx $$
で与えられる。</p>

<h2>モンテカルロ積分</h2>

<p>$g(x)$ という関数が存在し、$\int<em>{a}<sup>{b}{g(x)}dx$</sup> を計算したい。ここで
$$ E[g(x)]=\int </em>{ -\infty }<sup>{</sup> \infty}{ g(x)f(x) } dx $$
なので、無作為標本がXの確率分布から得ることができれば、$E[g(x)]$ の不偏推定量は標本平均になる。</p>

<h3>モンテカルロ積分の推定量 $\theta$ の計算手順</h3>

<ol>
<li>一様分布 Uniform(a, b) から、独立同分布 (iid) の確率変数 $X_1$, …, $X_m$ を生成</li>
<li>$\overline{ g(X) } = \frac{1}{m}\sum_{i=1}<sup>{m}g(X_i)$</sup> を計算する。</li>
<li>推定値は、$\hat{\theta} = (b - a)\overline{g(X)}$ になる。</li>
</ol>


<h3>モンテカルロ積分の例</h3>

<h4>単純モンテカルロ積分推定量</h4>

<p>$\theta = \int_{0}<sup>{1}</sup> g(x)$ を推定する問題を考えてみる。もし、$X_1, … X_m$ が一様分布 Uniform(0, 1) からの無作為標本である場合、</p>

<p>$$ \hat{ \theta } = \overline{ g_m(x) } = \frac{1}{m} \sum_{i=1}<sup>{m}g(X_i)</sup> $$</p>

<p>Rで実装してみる。</p>

<div><script src='https://gist.github.com/2250944.js?file='></script>
<noscript><pre><code>m &lt;- 100000
x &lt;- runif(m)

# Monte Carlo method
theta.hat &lt;- mean(exp(-x))

# numeric integral
theta &lt;- 1 - exp(-1)

results &lt;- sprintf(&quot;Theta hat: %f\nNumeric integral: %f\n&quot;, theta.hat, theta)
cat(results)

Theta hat: 0.629351
Numeric integral: 0.632121</code></pre></noscript></div>


<p>一様分布からサンプリングして平均するだけ。実装はとても簡単。結果もそこそこ似た感じ。</p>

<p>確率1で $E[g(X)] = \theta$に収束する (大数の強法則)。このときの単純モンテカルロ推定量は、$\overline{g_m(X)}$ となる。</p>

<p>区間が {a, b} の場合は、 $y = (t - a)(b -a)$ および $dy = (1/(b -a)) dt$ に変数変換してやるか、$Uniform(0,1)$ を区間内で別の密度関数に置き換えればよい。</p>

<h4>非有界区間のモンテカルロ積分</h4>

<p>標準正規分布の累積分布関数を推定する。
$$ \Phi \left( x \right) = \int_{-\infty}<sup>{\infty}\frac{1}{</sup> \sqrt{2\pi} } { e }<sup>{</sup> \frac{t<sup>2}{2}</sup> }dt $$</p>

<p>(つづく)</p>

<h2>ここまでのまとめ</h2>

<p>確率は確率分布関数の面積だと考えることができるので、確率を推定するために積分できると嬉しい。そのために、積分したい区間を期待値に均してしまってから、区間の分だけ足し合せればよい。そのとき、複雑な関数だと積分できないので、期待値の定義と元となる確率分布からのサンプリングをすることで、データから標本平均を計算し、積分するのがモンテカルロ積分ということか。</p>

<p>だから平均や分散の計算や積分などにMCMCが使われる、というオチ。</p>

<h2>次にやること</h2>

<ol>
<li>非有界区間のモンテカルロ積分について理解する</li>
<li>マルコフ連鎖の復習。特に詳細釣り合い条件と収束の話など。</li>
<li>MHアルゴリズムを理解し、ギブスサンプラーの復習</li>
<li>MHアルゴリズムの例と実装。</li>
<li>ベイズ回帰との関係の理解</li>
</ol>


<p><a href="http://park.itc.u-tokyo.ac.jp/atstat/jss75shunen/Vol3.pdf">第III巻 数理・計算の統計科学 (北川源四郎・竹村彰通編) </a> (pdf) の第10章「マルコフ連鎖モンテカルロ法入門」が非常にわかりやすいので、こちらも並行して読む予定。統計科学のフロンティア12「<a href="http://www.amazon.co.jp/gp/product/4000068520?ie=UTF8&amp;tag=itoshitv-22&amp;linkCode=shr&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4000068520&amp;ref_=sr_1_1&amp;qid=1333101908&amp;sr=8-1">計算統計II</a>」も参考になりそう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New entry in Japanese]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/03/29/new-entry-in-japanese/"/>
    <updated>2012-03-29T20:13:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/03/29/new-entry-in-japanese</id>
    <content type="html"><![CDATA[<p>Cocoa Emacs で SKK 使おうとするとなにやら面倒なので、CotEditor を入れてみた。早速に日本語で書いてみる。ちゃんと表示されるかな?</p>

<p>コマンドラインから CotEditor を起動できるようにした。やり方は、~/zshrc に以下のように書いておく。</p>

<pre><code>alias c="/Applications/CotEditor.app $1"
</code></pre>

<p>こうしておくと、</p>

<pre><code>touch hoge.txt
c hoge.txt
</code></pre>

<p>で hoge.txt が CotEditor で開けるようになる。</p>

<p>さてこのページをどうやって使おうか。あまり宣伝しないで、自分に向けて自分のためだけに書くメモのように使うかな。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing a equation in Octopress]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/03/29/writing-a-equation-in-octopress/"/>
    <updated>2012-03-29T18:42:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/03/29/writing-a-equation-in-octopress</id>
    <content type="html"><![CDATA[<p>This entry is test of <a href="http://www.mathjax.org/">MathJax</a> to show a equation in Octopress. I am going to write Tex in Octopress.</p>

<p>Let&#8217;s do some practice: <strong>Energy eigenstate</strong></p>


<pre><code>&lt;p&gt;$$
p_1^{(can, \beta)} = \frac{1}{1+e^{- \beta \Delta E}}
$$&lt;/p&gt;

&lt;p&gt;$$
p_2^{(can, \beta)} = \frac{e^{- \beta \Delta E}}{1+e^{- \beta \Delta E}}
$$&lt;/p&gt;
</code></pre>

<p>$$
p_1^{(can, \beta)} = \frac{1}{1+e^{- \beta \Delta E}}
$$</p>




<p>$$
p_2^{(can, \beta)} = \frac{e^{- \beta \Delta E}}{1+e^{- \beta \Delta E}}
$$</p>


<p>What&#8217;s happen&#8217;?</p>

<pre><code>$$ \begin{aligned} p_1^{(can, \beta)} &amp;amp; = \frac{1}{1+e^{- \beta \Delta E}} \\ p_2^{(can, \beta)} &amp;amp; = \frac{e^{- \beta \Delta E}}{1+e^{- \beta \Delta E}} \end{aligned} $$
</code></pre>

<p>$$ \begin{aligned} p_1^{(can, \beta)} &amp; = \frac{1}{1+e^{- \beta \Delta E}} &#92; p_2^{(can, \beta)} &amp; = \frac{e^{- \beta \Delta E}}{1+e^{- \beta \Delta E}} \end{aligned} $$</p>


<p>I will test inline mode, $p_{1}<sup>{(can,\beta)}$</sup> on Octopress.</p>

<p>Reference:
<a href="http://luikore.github.com/2011/09/good-things-learned-from-octopress/">Starting From Octopress</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, world]]></title>
    <link href="http://cat.hackingisbelieving.org//blog/2012/03/29/hello/"/>
    <updated>2012-03-29T14:33:00+09:00</updated>
    <id>http://cat.hackingisbelieving.org//blog/2012/03/29/hello</id>
    <content type="html"><![CDATA[<p>I am tring to use the <a href="http://octopress.org/">Octopress</a>, a cool static html generater on
GitHub Pages. This is first commit of the blog entry. Can you see me?
To setup a Octpress, I refer to this blog entry. <a href="http://tokkonopapa.github.com/blog/2011/12/30/octopress-on-github-and-bitbucket/">Octopressのインストールから運用管理まで</a></p>

<p>I need to install text editor to write a blog entry in Terminal. AquaSKK
cannot work in Cocoa Emacs.</p>
]]></content>
  </entry>
  
</feed>
